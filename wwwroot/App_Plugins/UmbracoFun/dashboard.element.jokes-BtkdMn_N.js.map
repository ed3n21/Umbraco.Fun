{"version":3,"file":"dashboard.element.jokes-BtkdMn_N.js","sources":["../../../Client/src/components/disclaimer-box.ts","../../../Client/src/components/select-multiple.ts","../../../Client/src/dashboards/dashboard.element.jokes.ts"],"sourcesContent":["import { LitElement, html, css, customElement, state, property } from '@umbraco-cms/backoffice/external/lit'\r\n\r\n@customElement('disclaimer-box')\r\nexport class DisclaimerBox extends LitElement {\r\n    @property()\r\n    text = 'This content may contain spoilers or sensitive material. Click to reveal.'\r\n\r\n    @state()\r\n    private revealed = false\r\n\r\n    static styles = css`\r\n        .disclaimer {\r\n            filter: blur(4px);\r\n            cursor: pointer;\r\n            transition: filter 0.3s ease;\r\n            user-select: none;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 1rem;\r\n            border-radius: 0.5rem;\r\n            color: #444;\r\n        }\r\n\r\n        .disclaimer.revealed {\r\n            filter: none;\r\n            cursor: default;\r\n            user-select: text;\r\n        }\r\n    `\r\n\r\n    private reveal() {\r\n        this.revealed = true\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <div\r\n                class=\"disclaimer ${this.revealed ? 'revealed' : ''}\"\r\n                @click=${this.reveal}\r\n            >\r\n                ${this.text}\r\n            </div>\r\n        `\r\n    }\r\n}\r\n","import { LitElement, html, css, customElement, state, property, repeat } from '@umbraco-cms/backoffice/external/lit'\r\n\r\n@customElement('select-multiple')\r\nexport class SelectMultiple extends LitElement {\r\n    @property({type: Array})\r\n    options: string[] = [];\r\n\r\n    // @state()\r\n    // private revealed = false\r\n\r\n    private handleFilterChange(e: Event) {\r\n        const selectedOptions = Array.from((e.target as HTMLSelectElement).selectedOptions)\r\n        const values = selectedOptions.map(opt => opt.value)\r\n        console.log('Selected filter values:', values)\r\n        // Apply filtering logic here\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <select id=\"filter\" multiple @change=${this.handleFilterChange}>\r\n                ${repeat(\r\n                    this.options,\r\n                    option => html`<option value=${option}>${option}</option>`\r\n                )}\r\n            </select>\r\n        `\r\n    }\r\n\r\n    static styles = css`\r\n        .disclaimer {\r\n            filter: blur(4px);\r\n            cursor: pointer;\r\n            transition: filter 0.3s ease;\r\n            user-select: none;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 1rem;\r\n            border-radius: 0.5rem;\r\n            color: #444;\r\n        }\r\n\r\n        .disclaimer.revealed {\r\n            filter: none;\r\n            cursor: default;\r\n            user-select: text;\r\n        }\r\n    `\r\n}\r\n","import { LitElement, customElement, html, css, repeat, state, nothing, query } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { Joke, JokesService } from \"../api\"\r\nimport { UUIButtonElement, UUISymbolSortElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport \"../components/disclaimer-box\";\r\nimport \"../components/select-multiple\";\r\n\r\n@customElement('jokes-dashboard')\r\nexport class JokesDashboardElement extends UmbElementMixin(LitElement) {\r\n\r\n    @state()\r\n    private _jokes: Joke[] = [];\r\n\r\n    async firstUpdated() {\r\n        this.#getJokes();\r\n    }\r\n\r\n    #getJokes = async () =>  {\r\n        const { data, error } = await JokesService.getJokes();\r\n\r\n        if (error) {\r\n            console.error(error);\r\n        }\r\n\r\n        if (data !== undefined) {\r\n            this._jokes = this._jokes.concat(data);\r\n        }\r\n\r\n        return {data, error};\r\n    }\r\n\r\n    #onClickGetJokes = async (ev: Event) => {\r\n        const buttonElement = ev.target as UUIButtonElement;\r\n        buttonElement.state = \"waiting\";\r\n\r\n        const { data, error } = await this.#getJokes();\r\n\r\n        if (error) {\r\n            buttonElement.state = \"failed\";\r\n            return;\r\n        }\r\n\r\n        // If data was received, reset button state to default\r\n        if (data !== undefined) {\r\n            buttonElement.state = undefined;\r\n        }\r\n    }\r\n\r\n    // Table Settings\r\n    @state()\r\n    private _sortActive = false;\r\n\r\n    @state()\r\n    private _sortDescending = false;\r\n\r\n    @query('uui-symbol-sort')\r\n    private _sorter?: UUISymbolSortElement;\r\n    \r\n    #onClickSort = () => {\r\n        if (!this._sorter) return;\r\n\r\n        // Manage sort states\r\n        if (!this._sorter.active) {\r\n            this._sorter.active = true;\r\n            this._jokes = this.sortByType(this._jokes, 'type', this._sorter.descending);\r\n        }\r\n        else if (this._sorter.active && this._sorter.descending) {\r\n            this._sorter.active = false;\r\n            this._sorter.descending = false;\r\n            console.log('this._sorter.descending', this._sorter.descending);\r\n        }\r\n        else {\r\n            this._sorter.descending = !this._sorter.descending;\r\n            this._jokes = this.sortByType(this._jokes, 'type', this._sorter.descending);\r\n        }\r\n    }\r\n\r\n    sortByType(arr: Joke[], key: keyof Joke, descending: boolean): Joke[] {\r\n        return [...arr].sort((a, b) => {\r\n            const valA = String(a[key]).toLowerCase();\r\n            const valB = String(b[key]).toLowerCase();\r\n        \r\n            const comparison = valA.localeCompare(valB);\r\n            return descending ? -comparison : comparison;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            ${this._jokes.length\r\n                ? html`\r\n                    <uui-box headline=\"Filters\" class=\"wide\">\r\n                        <select-multiple .options=${['dad', 'general']}></select-multiple>\r\n                    </uui-box>\r\n\r\n                    <uui-box headline=\"Jokes\" class=\"wide\">\r\n                        <uui-table\r\n                            aria-label=\"Table With Jokes\"\r\n                            aria-describedby=\"table-description\"\r\n                            >\r\n                            <uui-table-column style=\"font-style: italic; background-color:\"></uui-table-column>\r\n                            <uui-table-column style=\"width: 45%; background-color: \"></uui-table-column>\r\n                            <uui-table-column style=\"width: 45%; background-color: \"></uui-table-column>\r\n                            <uui-table-head style=\"background-color: ; color: \">\r\n                                <uui-table-head-cell id=\"joke-type-header\" @click=${this.#onClickSort}>\r\n                                    Type\r\n                                    <uui-symbol-sort \r\n                                        .active=${this._sortActive}\r\n                                        .descending=${this._sortDescending}\r\n                                    ></uui-symbol-sort>\r\n                                </uui-table-head-cell>\r\n                                <uui-table-head-cell>Setup</uui-table-head-cell>\r\n                                <uui-table-head-cell>Punchline</uui-table-head-cell>\r\n                            </uui-table-head>\r\n                            ${repeat(\r\n                                this._jokes,\r\n                                joke => joke.id,\r\n                                joke => html`\r\n                                    <uui-table-row>\r\n                                        <uui-table-cell>${joke.type}</uui-table-cell>\r\n                                        <uui-table-cell>${joke.setup}</uui-table-cell>\r\n                                        <uui-table-cell>\r\n                                            <disclaimer-box text=${joke.punchline}></disclaimer-box>\r\n                                        </uui-table-cell>\r\n                                    </uui-table-row>`\r\n                            )}\r\n                        </uui-table>\r\n                        <div style=\"text-align: center\">\r\n                            <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickGetJokes}\" class=\"center\">\r\n                                Load more...\r\n                            </uui-button>\r\n                        </div>\r\n                    </uui-box>\r\n                `\r\n                : nothing}\r\n        `;\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n            :host {\r\n                display: grid;\r\n                gap: var(--uui-size-layout-1);\r\n                padding: var(--uui-size-layout-1);\r\n                grid-template-columns: 1fr 1fr 1fr;\r\n            }\r\n\r\n            h2 {\r\n                margin-top:0;\r\n            }\r\n\r\n            .wide {\r\n                grid-column: span 3;\r\n            }\r\n\r\n            .disclaimer {\r\n                filter: blur(4px);\r\n                cursor: pointer;\r\n                transition: filter 0.3s ease;\r\n                user-select: none;\r\n                background-color: rgba(255, 255, 255, 0.8);\r\n                padding: 1rem;\r\n                border-radius: 0.5rem;\r\n                color: #444;\r\n            }\r\n\r\n            .disclaimer.revealed {\r\n                filter: none;\r\n                cursor: default;\r\n                user-select: text;\r\n            }\r\n\r\n            #joke-type-header {\r\n                cursor: pointer;\r\n            }\r\n\r\n            #joke-type-header:hover {\r\n                --uui-symbol-sort-hover: 1;\r\n                /* We want to provide the hover indication on the sorting arrow for the full interactive element. */\r\n            }\r\n        `];\r\n}\r\n\r\nexport default JokesDashboardElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'jokes-dashboard': JokesDashboardElement;\r\n    }\r\n}"],"names":["DisclaimerBox","LitElement","html","css","__decorateClass","property","state","customElement","SelectMultiple","values","opt","repeat","option","_getJokes","_onClickGetJokes","_onClickSort","JokesDashboardElement","UmbElementMixin","__privateAdd","data","error","JokesService","ev","buttonElement","__privateGet","arr","key","descending","a","b","valA","valB","comparison","joke","nothing","query","JokesDashboardElement$1"],"mappings":"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"}