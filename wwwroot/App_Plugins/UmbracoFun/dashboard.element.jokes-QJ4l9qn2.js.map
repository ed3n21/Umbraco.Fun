{"version":3,"file":"dashboard.element.jokes-QJ4l9qn2.js","sources":["../../../Client/src/components/disclaimer-box.ts","../../../Client/src/dashboards/dashboard.element.jokes.ts"],"sourcesContent":["import { LitElement, html, css, customElement, state, property } from '@umbraco-cms/backoffice/external/lit'\r\n\r\n@customElement('disclaimer-box')\r\nexport class DisclaimerBox extends LitElement {\r\n    @property()\r\n    text = 'This content may contain spoilers or sensitive material. Click to reveal.'\r\n\r\n    @state()\r\n    private revealed = false\r\n\r\n    static styles = css`\r\n        .disclaimer {\r\n            filter: blur(4px);\r\n            cursor: pointer;\r\n            transition: filter 0.3s ease;\r\n            user-select: none;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 1rem;\r\n            border-radius: 0.5rem;\r\n            color: #444;\r\n        }\r\n\r\n        .disclaimer.revealed {\r\n            filter: none;\r\n            cursor: default;\r\n            user-select: text;\r\n        }\r\n    `\r\n\r\n    private reveal() {\r\n        this.revealed = true\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <div\r\n                class=\"disclaimer ${this.revealed ? 'revealed' : ''}\"\r\n                @click=${this.reveal}\r\n            >\r\n                ${this.text}\r\n            </div>\r\n        `\r\n    }\r\n}\r\n","import { LitElement, customElement, html, css, repeat, state, nothing, query } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { Joke, JokesService } from \"../api\"\r\nimport { UUIButtonElement, UUIPaginationElement, UUISymbolSortElement } from \"@umbraco-cms/backoffice/external/uui\";\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext } from \"@umbraco-cms/backoffice/notification\";\r\nimport \"../components/disclaimer-box\";\r\n\r\n@customElement('jokes-dashboard')\r\nexport class JokesDashboardElement extends UmbElementMixin(LitElement) {\r\n\r\n    @state()\r\n    private _jokes: Joke[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (notificationContext) => {\r\n            this.#notificationContext = notificationContext;\r\n        });\r\n    }\r\n\r\n    #notificationContext: UmbNotificationContext | undefined;\r\n\r\n    #onClickGetJokes = async (ev: Event) => {\r\n        const buttonElement = ev.target as UUIButtonElement;\r\n        buttonElement.state = \"waiting\";\r\n\r\n        const { data, error } = await JokesService.getJokes();\r\n\r\n        if (error) {\r\n            buttonElement.state = \"failed\";\r\n            console.error(error);\r\n            return;\r\n        }\r\n\r\n        if (data !== undefined) {\r\n            this._jokes = this._jokes.concat(data);\r\n            buttonElement.state = \"success\";\r\n        }\r\n\r\n        if (this.#notificationContext) {\r\n            this.#notificationContext.peek(\"warning\", {\r\n                data: {\r\n                    headline: `Jokes Re-supply`,\r\n                    message: `Delivered ${data?.length ?? 0} jokes`,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Table Settings\r\n    @state()\r\n    private _currentPage = 1;\r\n\r\n    @state()\r\n    private _sortActive = false;\r\n\r\n    @state()\r\n    private _sortDescending = false;\r\n\r\n    @query('uui-symbol-sort')\r\n    private _sorter?: UUISymbolSortElement;\r\n\r\n    @query('uui-pagination', true)\r\n    private _paginator?: UUIPaginationElement;\r\n\r\n    private _pageSize = 5;\r\n\r\n    #onPageChange(e: CustomEvent) {\r\n        this._currentPage = (e.target as UUIPaginationElement).current;\r\n    }\r\n\r\n    #onSortClick = () => {\r\n        if (this._sorter) {\r\n            if (!this._sorter.active) {\r\n                this._sorter.active = true;\r\n            }\r\n            else if (this._sorter.active && this._sorter.descending) {\r\n                this._sorter.active = false;\r\n                this._sorter.descending = false;\r\n            }\r\n            else {\r\n                this._sorter.descending = !this._sorter.descending;\r\n            }\r\n\r\n            if (this._paginator) {\r\n                this._paginator.current = 1;\r\n\r\n                this._paginator.dispatchEvent(new Event('change', {\r\n                    bubbles: true,\r\n                    composed: true\r\n                  }));\r\n            }\r\n        }\r\n    }\r\n\r\n    sortByType(arr: Joke[], key: keyof Joke, direction: 'asc' | 'desc'): Joke[] {\r\n        return [...arr].sort((a, b) => {\r\n            const valA = String(a[key]).toLowerCase();\r\n            const valB = String(b[key]).toLowerCase();\r\n        \r\n            const comparison = valA.localeCompare(valB);\r\n            return direction === 'asc' ? comparison : -comparison;\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const startIndex = (this._currentPage - 1) * this._pageSize;\r\n        const endIndex = startIndex + this._pageSize;\r\n        const visibleJokes = this._jokes.slice(startIndex, endIndex);\r\n\r\n        return html`\r\n            <uui-box headline=\"Jokes Controls\">\r\n                <div slot=\"header\">[Server]</div>\r\n                <uui-button color=\"default\" look=\"primary\" @click=\"${this.#onClickGetJokes}\">\r\n                    Request Jokes\r\n                </uui-button>\r\n                <p>This endpoint gets you a list of jokes.</p>\r\n            </uui-box>\r\n\r\n            ${this._jokes.length\r\n                ? html`\r\n                    <uui-box headline=\"Jokes\" class=\"wide\">\r\n                        <uui-table\r\n                            aria-label=\"Table With Jokes\"\r\n                            aria-describedby=\"table-description\"\r\n                            >\r\n                            <uui-table-column style=\"font-style: italic; background-color:\"></uui-table-column>\r\n                            <uui-table-column style=\"width: 45%; background-color: \"></uui-table-column>\r\n                            <uui-table-column style=\"width: 45%; background-color: \"></uui-table-column>\r\n                            <uui-table-head style=\"background-color: ; color: \">\r\n                                <uui-table-head-cell id=\"joke-type-header\" @click=${this.#onSortClick}>\r\n                                    Type\r\n                                    <uui-symbol-sort \r\n                                        .active=${this._sortActive}\r\n                                        .descending=${this._sortDescending}\r\n                                    ></uui-symbol-sort>\r\n                                </uui-table-head-cell>\r\n                                <uui-table-head-cell>Setup</uui-table-head-cell>\r\n                                <uui-table-head-cell>Punchline</uui-table-head-cell>\r\n                            </uui-table-head>\r\n                            ${repeat(\r\n                                visibleJokes,\r\n                                joke => joke.id,\r\n                                joke => html`\r\n                                    <uui-table-row>\r\n                                        <uui-table-cell>${joke.type}</uui-table-cell>\r\n                                        <uui-table-cell>${joke.setup}</uui-table-cell>\r\n                                        <uui-table-cell>\r\n                                            <disclaimer-box text=${joke.punchline}></disclaimer-box>\r\n                                        </uui-table-cell>\r\n                                    </uui-table-row>`\r\n                            )}\r\n                        </uui-table>\r\n                        <uui-pagination\r\n                            .total=${Math.ceil(this._jokes.length / this._pageSize)}\r\n                            .current=${this._currentPage}\r\n                            @change=${this.#onPageChange}\r\n                        ></uui-pagination>\r\n                    </uui-box>\r\n                `\r\n                : nothing}\r\n        `;\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n            :host {\r\n                display: grid;\r\n                gap: var(--uui-size-layout-1);\r\n                padding: var(--uui-size-layout-1);\r\n                grid-template-columns: 1fr 1fr 1fr;\r\n            }\r\n\r\n            h2 {\r\n                margin-top:0;\r\n            }\r\n\r\n            .wide {\r\n                grid-column: span 3;\r\n            }\r\n\r\n            .disclaimer {\r\n                filter: blur(4px);\r\n                cursor: pointer;\r\n                transition: filter 0.3s ease;\r\n                user-select: none;\r\n                background-color: rgba(255, 255, 255, 0.8);\r\n                padding: 1rem;\r\n                border-radius: 0.5rem;\r\n                color: #444;\r\n            }\r\n\r\n            .disclaimer.revealed {\r\n                filter: none;\r\n                cursor: default;\r\n                user-select: text;\r\n            }\r\n\r\n            #joke-type-header {\r\n                cursor: pointer;\r\n            }\r\n\r\n            #joke-type-header:hover {\r\n                --uui-symbol-sort-hover: 1;\r\n                /* We want to provide the hover indication on the sorting arrow for the full interactive element. */\r\n            }\r\n        `];\r\n}\r\n\r\nexport default JokesDashboardElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'jokes-dashboard': JokesDashboardElement;\r\n    }\r\n}"],"names":["DisclaimerBox","LitElement","html","css","__decorateClass","property","state","customElement","_notificationContext","_onClickGetJokes","_JokesDashboardElement_instances","onPageChange_fn","_onSortClick","JokesDashboardElement","UmbElementMixin","__privateAdd","ev","buttonElement","data","error","JokesService","__privateGet","UMB_NOTIFICATION_CONTEXT","notificationContext","__privateSet","arr","key","direction","a","b","valA","valB","comparison","startIndex","endIndex","visibleJokes","repeat","joke","__privateMethod","nothing","query","JokesDashboardElement$1"],"mappings":"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"}